name: Deploy Application

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Build Docker image
      run: |
        # Build Docker image
        docker build -t ${{ secrets.ECR_REPOSITORY }}:latest .
        
        # Authenticate Docker to ECR
        aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

        # Tag and push Docker image
        docker tag ${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.ECR_REPOSITORY }}:latest
        docker push ${{ secrets.ECR_REPOSITORY }}:latest

    - name: Update ECS Service
      run: |
        # Update the ECS task definition
        TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition my-task-family | jq -r '.taskDefinition.taskDefinitionArn')

        # Register new task definition revision
        NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
          --family my-task-family \
          --network-mode awsvpc \
          --requires-compatibilities FARGATE \
          --cpu "256" \
          --memory "512" \
          --container-definitions '[{
            "name": "flask-container",
            "image": "${{ secrets.ECR_REPOSITORY }}:latest",
            "essential": true,
            "memory": 512,
            "cpu": 256,
            "portMappings": [{
              "containerPort": 5000,
              "hostPort": 5000
            }],
            "healthCheck": {
              "command": ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"],
              "interval": 30,
              "retries": 3,
              "startPeriod": 0,
              "timeout": 5
            }
          }]' \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        
        # Update ECS service to use new task definition revision
        aws ecs update-service --cluster my-ecs-cluster --service my-ecs-service --task-definition $NEW_TASK_DEFINITION_ARN
